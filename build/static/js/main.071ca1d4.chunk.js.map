{"version":3,"sources":["assets/twitter-logo.svg","Components/SelectCharacter/index.js","App.js","constants.js","index.js"],"names":["SelectCharacter","setCharacterNFT","className","TWITTER_HANDLE","TWITTER_LINK","App","useState","currentAccount","setCurrentAccount","characterNFT","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","error","connectWalletAction","alert","useEffect","fetchNFTMetadata","provider","ethers","providers","Web3Provider","signer","getSigner","gameContract","Contract","Arcadio","abi","checkIfUserHasNFT","txn","name","arcadeData","imageURI","gamesLeft","toNumber","arcadePoints","onClick","src","width","height","frameBorder","class","allowFullScreen","alt","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gp1EAAe,MAA0B,yC,qBCc1BA,EARS,SAAC,GAAwB,EAAtBC,gBACzB,OACE,qBAAKC,UAAU,6BAAf,SACE,sE,gBCAAC,EAAiB,WACjBC,EAAY,8BAA0BD,GAuJ7BE,EArJH,WAEV,MAA4CC,mBAAS,MAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAwCF,mBAAS,MAAjD,mBAAOG,EAAP,KAAqBR,EAArB,KAEMS,EAAwB,uCAAG,kCAAAC,EAAA,oEAEVC,OAAZC,EAFsB,EAEtBA,SAFsB,uBAK7BC,QAAQC,IAAI,+BALiB,iCAU7BD,QAAQC,IAAI,0BAA2BF,GAVV,UAaNA,EAASG,QAAQ,CAACC,OAAQ,iBAbpB,QAeL,KAFlBC,EAbuB,QAehBC,QACLC,EAAUF,EAAS,GACzBJ,QAAQC,IAAI,+BAAgCK,GAC5CZ,EAAkBY,IAGlBN,QAAQC,IAAI,+BArBe,0DA0B7BD,QAAQO,MAAR,MA1B6B,0DAAH,qDAgD1BC,EAAmB,uCAAG,gCAAAX,EAAA,oEAELC,OAAZC,EAFiB,EAEjBA,SAFiB,uBAItBU,MAAM,sCAJgB,0CAQDV,EAASG,QAAQ,CACtCC,OAAQ,wBATc,OAQlBC,EARkB,OAYxBJ,QAAQC,IAAI,YAAaG,EAAS,IAClCV,EAAkBU,EAAS,IAbH,kDAgBxBJ,QAAQO,MAAR,MAhBwB,0DAAH,qDAuEvB,OAlDAG,qBAAU,WACRd,MAUC,IAGHc,qBAAU,WAIR,IAAMC,EAAgB,uCAAG,kCAAAd,EAAA,6DACvBG,QAAQC,IAAI,yCAA0CR,GAEhDmB,EAAW,IAAIC,IAAOC,UAAUC,aAAajB,OAAOC,UACpDiB,EAASJ,EAASK,YAClBC,EAAe,IAAIL,IAAOM,SC7Gb,6CD+GjBC,EAAQC,IACRL,GARqB,SAWLE,EAAaI,oBAXR,QAWjBC,EAXiB,QAYfC,MACNxB,QAAQC,IAAI,0BACZd,ECnHG,CACLqC,MAFuBC,EDoHeF,GClHrBC,KACjBE,SAAUD,EAAWC,SACrBC,UAAWF,EAAWE,UAAUC,WAChCC,aAAcJ,EAAWI,aAAaD,cDiHpC5B,QAAQC,IAAI,0BAhBS,iCCtGD,IAACwB,IDsGA,OAAH,qDAuBlBhC,IACFO,QAAQC,IAAI,kBAAmBR,GAC/BkB,OAED,CAAClB,IAMF,qBAAKL,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,mBAAGA,UAAU,uBAAb,+CACA,mBAAGA,UAAU,WAAb,wEA7FFK,EAUIA,IAAmBE,EAClB,cAAC,EAAD,CAAiBR,gBAAiBA,SADtC,EARD,sBAAKC,UAAY,2BAAjB,UACG,wBAAQA,UAAU,mCAAmC0C,QAAStB,EAA9D,6CAEC,wBAAQuB,IAAI,4CAA4CC,MAAM,MAAMC,OAAO,MAAMC,YAAY,IAAIC,MAAM,cAAcC,iBAAe,UA8FxI,sBAAKhD,UAAU,mBAAf,UACE,qBAAKiD,IAAI,eAAejD,UAAU,eAAe2C,IAAKO,IACtD,mBACElD,UAAU,cACVmD,KAAMjD,EACNkD,OAAO,SACPC,IAAI,aAJN,+BAKiBpD,cErJ3BqD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.071ca1d4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.ab177c79.svg\";","import React, { useEffect, useState } from 'react';\r\nimport './SelectCharacter.css';\r\n\r\n/*\r\n * Don't worry about setCharacterNFT just yet, we will talk about it soon!\r\n */\r\nconst SelectCharacter = ({ setCharacterNFT }) => {\r\n  return (\r\n    <div className=\"select-character-container\">\r\n      <h2>Mint Your Machine. Choose wisely.</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectCharacter;","import React, {useEffect,useState} from 'react';\r\nimport twitterLogo from './assets/twitter-logo.svg';\r\nimport './App.css';\r\nimport SelectCharacter from './Components/SelectCharacter';\r\nimport { CONTRACT_ADDRESS, transformArcadeData } from './constants';\r\nimport Arcadio from './utils/Arcadio.json';\r\nimport { ethers } from 'ethers';\r\n\r\n// Constants\r\nconst TWITTER_HANDLE = '_arcadio';\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\n\r\nconst App = () => {\r\n\r\n  const [currentAccount, setCurrentAccount] = useState(null);\r\n  const [characterNFT, setCharacterNFT] = useState(null);\r\n  \r\n  const checkIfWalletIsConnected = async() =>{\r\n    try{\r\n      const {ethereum} = window;\r\n\r\n    if(!ethereum){\r\n      console.log('Make sure you have Metamask');\r\n     <p> <h2>('Make sure you have Metamask')</h2></p>;\r\n     return;\r\n    }\r\n    else {\r\n      console.log('We have ethereum object', ethereum);\r\n      <p> <h2>('We have connected to the wallet')</h2></p>;\r\n\r\n      const accounts = await ethereum.request({method: 'eth_accounts'});\r\n\r\n      if (accounts.length !== 0){\r\n        const account = accounts[0];\r\n        console.log('Found an authorized account:', account);\r\n        setCurrentAccount(account);\r\n      }\r\n      else{\r\n        console.log('No authorized account found');\r\n      }\r\n    }\r\n  }\r\n    catch(error){\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const renderContent = () => {\r\n    if(!currentAccount){\r\n      return(\r\n        <div className = \"connect-wallet-container\">\r\n           <button className='cta-button connect-wallet-button' onClick={connectWalletAction}>\r\n            Connect Wallet for an adventure</button>\r\n            <iframe src=\"https://giphy.com/embed/l0MYv6ddHFgvPWEus\" width=\"454\" height=\"480\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe>\r\n          \r\n          </div>\r\n      );\r\n    }\r\n    else if(currentAccount && !characterNFT){\r\n      return <SelectCharacter setCharacterNFT={setCharacterNFT}/>;\r\n    }\r\n\r\n\r\n  };\r\n\r\nconst connectWalletAction = async() => {\r\n  try{\r\n    const {ethereum} = window;\r\n    if(!ethereum){\r\n      alert('Get metamask from the chrome store');\r\n      return;\r\n    }\r\n\r\n    const accounts = await ethereum.request({\r\n      method: 'eth_requestAccounts', \r\n    });\r\n\r\n    console.log('Connected', accounts[0]);\r\n    setCurrentAccount(accounts[0]);\r\n  }\r\n  catch(error){\r\n    console.error(error);\r\n  }\r\n};\r\n\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n    const checkNetwork = async () => {\r\n      try { \r\n        if (window.ethereum.networkVersion !== '4') {\r\n          alert(\"Please switch to Rinkeby!\")\r\n        }\r\n      } catch(error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n    /*\r\n     * The function we will call that interacts with out smart contract\r\n     */\r\n    const fetchNFTMetadata = async () => {\r\n      console.log('Checking for Character NFT on address:', currentAccount);\r\n  \r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      const signer = provider.getSigner();\r\n      const gameContract = new ethers.Contract(\r\n        CONTRACT_ADDRESS,\r\n        Arcadio.abi,\r\n        signer\r\n      );\r\n  \r\n      const txn = await gameContract.checkIfUserHasNFT();\r\n      if (txn.name) {\r\n        console.log('User has character NFT');\r\n        setCharacterNFT(transformArcadeData(txn));\r\n      } else {\r\n        console.log('No character NFT found');\r\n      }\r\n    };\r\n  \r\n    /*\r\n     * We only want to run this, if we have a connected wallet\r\n     */\r\n    if (currentAccount) {\r\n      console.log('CurrentAccount:', currentAccount);\r\n      fetchNFTMetadata();\r\n    }\r\n  }, [currentAccount]);\r\n  \r\n  \r\n  \r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"header-container\">\r\n          <p className=\"header gradient-text\">&#127884; Arcadio &#127884;</p>\r\n          <p className=\"sub-text\">Join to have real world arcade experience through NFT's ! </p>\r\n          \r\n          {renderContent()}\r\n        </div>\r\n\r\n        \r\n        <div className=\"footer-container\">\r\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n          <a\r\n            className=\"footer-text\"\r\n            href={TWITTER_LINK}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >{`built with @${TWITTER_HANDLE}`}</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const CONTRACT_ADDRESS = '0x5FbDB2315678afecb367f032d93F642f64180aa3';\r\n\r\nconst transformArcadeData = (arcadeData) => {\r\n    return {\r\n      name: arcadeData.name,\r\n      imageURI: arcadeData.imageURI,\r\n      gamesLeft: arcadeData.gamesLeft.toNumber(),\r\n      arcadePoints: arcadeData.arcadePoints.toNumber(),\r\n      \r\n    };\r\n  };\r\n\r\n\r\nexport { CONTRACT_ADDRESS, transformArcadeData };","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}